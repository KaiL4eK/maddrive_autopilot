<?xml version="1.0"?>

<launch>

	<include file="$(find openni_launch)/launch/openni.launch" />

	<node pkg="tf" type="static_transform_publisher" name="kinect_correction_link" args="0 0 -0.3 0.0 -0.087 0.0 /camera_link /kinect 1" />
	<node pkg="tf" type="static_transform_publisher" name="rgbd_link" args="0 0 0    0.0 0.0    0.0 /kinect /openni_rgb_optical_frame 1" />

	<node pkg="rgbdslam" type="rgbdslam" name="rgbdslam" cwd="node" required="true" output="log" > 
        <param name="/config/use_gui" value="false"/>
	    <param name="config/feature_extractor_type"        value="ORB"/><!-- also available: SIFT, SIFTGPU, SURF, SURF128 (extended SURF), ORB. -->
	    <param name="config/feature_detector_type"         value="ORB"/><!-- also available: SIFT, SURF, GFTT (good features to track), ORB. -->
	    <param name="config/detector_grid_resolution"      value="2"/><!-- detect on a 2x2 grid -->
	    <param name="config/max_keypoints"                 value="600"/><!-- Extract no more than this many keypoints -->
	    <param name="config/max_matches"                   value="300"/><!-- Keep the best n matches (important for ORB to set lower than max_keypoints) -->
	    <param name="config/cloud_display_type"            value="POINTS"/><!-- Show pointclouds as points (as opposed to TRIANGLE_STRIP) -->
	    <param name="config/min_sampled_candidates"        value="0"/><!-- Frame-to-frame comparisons to random frames (big loop closures) -->
	    <param name="config/predecessor_candidates"        value="3"/><!-- Frame-to-frame comparisons to sequential frames-->
	    <param name="config/neighbor_candidates"           value="3"/><!-- Frame-to-frame comparisons to graph neighbor frames-->
	    <param name="config/nn_distance_ratio"             value="0.9"/><!-- set empirically -->
	    <param name="config/ransac_iterations"             value="100"/><!-- set empirically -->
	    <param name="config/max_matches"                   value="200"/><!-- reduce the amount of matches (otherwise max=max_keypoints), removes outliers, speeds up ransac -->
	    <param name="config/pose_relative_to"              value="inaffected"/><!-- optimize only a subset of the graph: "largest_loop" = Everything from the earliest matched frame to the current one. Use "first" to optimize the full graph, "inaffected" to optimize only the frames that were matched (not those inbetween for loops) -->
	    <param name="config/keep_all_nodes"                value="true"/><!-- assume zero motion if no motion could be found and continue -->
	    <!-- <param name="config/fixed_frame_name"              value="/vodom"/> -->
	    <!-- Signify that this is not mapping -->
	    <param name="config/backend_solver"                value="pcg"/> <!-- pcg is fast and good for online operation -->
	    <param name="config/cloud_creation_skip_step"      value="16"/> <!-- Heavily subsample point cloud during creation -->
	    <param name="config/optimizer_skip_step"           value="1"/><!-- optimize only every n-th frame -->
  	</node>
</launch>